// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reliable_Reservations.Data;

#nullable disable

namespace Reliable_Reservations.Migrations
{
    [DbContext(typeof(ReliableReservationsDbContext))]
    [Migration("20241002101053_ReduceTableCountToFive")]
    partial class ReduceTableCountToFive
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Reliable_Reservations.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuItemId"));

                    b.Property<bool>("AvailabilityStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MenuItemId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            MenuItemId = 1,
                            AvailabilityStatus = true,
                            Category = "Appetizer",
                            Description = "Grilled bread topped with diced tomatoes, garlic, and basil.",
                            IsPopular = true,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3644),
                            Name = "Bruschetta",
                            Price = 6.99m
                        },
                        new
                        {
                            MenuItemId = 2,
                            AvailabilityStatus = true,
                            Category = "Appetizer",
                            Description = "Mushrooms stuffed with garlic, herbs, and cream cheese.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3646),
                            Name = "Stuffed Mushrooms",
                            Price = 7.99m
                        },
                        new
                        {
                            MenuItemId = 3,
                            AvailabilityStatus = true,
                            Category = "Starter",
                            Description = "Toasted bread slices with garlic butter.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3648),
                            Name = "Garlic Bread",
                            Price = 4.99m
                        },
                        new
                        {
                            MenuItemId = 4,
                            AvailabilityStatus = true,
                            Category = "Starter",
                            Description = "Creamy tomato soup with fresh basil.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3649),
                            Name = "Tomato Basil Soup",
                            Price = 5.99m
                        },
                        new
                        {
                            MenuItemId = 5,
                            AvailabilityStatus = true,
                            Category = "MainCourse",
                            Description = "Grilled salmon fillet served with lemon butter sauce.",
                            IsPopular = true,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3650),
                            Name = "Grilled Salmon",
                            Price = 15.99m
                        },
                        new
                        {
                            MenuItemId = 6,
                            AvailabilityStatus = true,
                            Category = "MainCourse",
                            Description = "Juicy grilled beef steak with a side of vegetables.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3652),
                            Name = "Beef Steak",
                            Price = 19.99m
                        },
                        new
                        {
                            MenuItemId = 7,
                            AvailabilityStatus = true,
                            Category = "Dessert",
                            Description = "Warm chocolate cake with a gooey molten center.",
                            IsPopular = true,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3653),
                            Name = "Chocolate Lava Cake",
                            Price = 6.99m
                        },
                        new
                        {
                            MenuItemId = 8,
                            AvailabilityStatus = true,
                            Category = "Dessert",
                            Description = "Classic Italian dessert with layers of mascarpone and espresso-soaked ladyfingers.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3654),
                            Name = "Tiramisu",
                            Price = 5.99m
                        },
                        new
                        {
                            MenuItemId = 9,
                            AvailabilityStatus = true,
                            Category = "Beverage",
                            Description = "Strong and rich espresso coffee.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3656),
                            Name = "Espresso",
                            Price = 2.99m
                        },
                        new
                        {
                            MenuItemId = 10,
                            AvailabilityStatus = true,
                            Category = "Beverage",
                            Description = "Refreshing homemade lemonade.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3658),
                            Name = "Lemonade",
                            Price = 3.99m
                        },
                        new
                        {
                            MenuItemId = 11,
                            AvailabilityStatus = true,
                            Category = "SideDish",
                            Description = "Crispy golden fries with a side of ketchup.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3659),
                            Name = "French Fries",
                            Price = 3.99m
                        },
                        new
                        {
                            MenuItemId = 12,
                            AvailabilityStatus = true,
                            Category = "SideDish",
                            Description = "Creamy mashed potatoes with butter and herbs.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3660),
                            Name = "Mashed Potatoes",
                            Price = 4.99m
                        },
                        new
                        {
                            MenuItemId = 13,
                            AvailabilityStatus = true,
                            Category = "Soup",
                            Description = "Hearty Italian soup with vegetables and pasta.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3661),
                            Name = "Minestrone Soup",
                            Price = 5.99m
                        },
                        new
                        {
                            MenuItemId = 14,
                            AvailabilityStatus = true,
                            Category = "Soup",
                            Description = "Classic chicken soup with noodles and vegetables.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3662),
                            Name = "Chicken Noodle Soup",
                            Price = 5.99m
                        },
                        new
                        {
                            MenuItemId = 15,
                            AvailabilityStatus = true,
                            Category = "Salad",
                            Description = "Salad with tomatoes, cucumbers, olives, and feta cheese.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3664),
                            Name = "Greek Salad",
                            Price = 6.99m
                        },
                        new
                        {
                            MenuItemId = 16,
                            AvailabilityStatus = true,
                            Category = "Salad",
                            Description = "Fresh tomatoes, mozzarella, and basil with balsamic glaze.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3665),
                            Name = "Caprese Salad",
                            Price = 7.99m
                        },
                        new
                        {
                            MenuItemId = 17,
                            AvailabilityStatus = true,
                            Category = "Special",
                            Description = "Succulent lobster tail served with drawn butter.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3666),
                            Name = "Lobster Tail",
                            Price = 29.99m
                        },
                        new
                        {
                            MenuItemId = 18,
                            AvailabilityStatus = true,
                            Category = "Special",
                            Description = "Creamy risotto with truffle oil and parmesan.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3667),
                            Name = "Truffle Risotto",
                            Price = 24.99m
                        },
                        new
                        {
                            MenuItemId = 19,
                            AvailabilityStatus = true,
                            Category = "Kids",
                            Description = "Crispy chicken nuggets served with fries.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3668),
                            Name = "Chicken Nuggets",
                            Price = 5.99m
                        },
                        new
                        {
                            MenuItemId = 20,
                            AvailabilityStatus = true,
                            Category = "Kids",
                            Description = "Creamy macaroni and cheese.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3670),
                            Name = "Mac and Cheese",
                            Price = 4.99m
                        },
                        new
                        {
                            MenuItemId = 21,
                            AvailabilityStatus = true,
                            Category = "Vegetarian",
                            Description = "Mixed vegetables stir-fried with soy sauce and served over rice.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3671),
                            Name = "Vegetable Stir-Fry",
                            Price = 9.99m
                        },
                        new
                        {
                            MenuItemId = 22,
                            AvailabilityStatus = true,
                            Category = "Vegetarian",
                            Description = "Lasagna layered with spinach, ricotta, and marinara sauce.",
                            IsPopular = false,
                            LastUpdated = new DateTime(2024, 10, 2, 10, 10, 53, 255, DateTimeKind.Utc).AddTicks(3672),
                            Name = "Vegetarian Lasagna",
                            Price = 11.99m
                        });
                });

            modelBuilder.Entity("Reliable_Reservations.Models.OpeningHours", b =>
                {
                    b.Property<int>("OpeningHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpeningHoursId"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time(0)");

                    b.HasKey("OpeningHoursId");

                    b.ToTable("OpeningHours");

                    b.HasData(
                        new
                        {
                            OpeningHoursId = 1,
                            CloseTime = new TimeOnly(23, 0, 0),
                            DayOfWeek = 0,
                            IsClosed = false,
                            OpenTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            OpeningHoursId = 2,
                            CloseTime = new TimeOnly(23, 0, 0),
                            DayOfWeek = 1,
                            IsClosed = true,
                            OpenTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            OpeningHoursId = 3,
                            CloseTime = new TimeOnly(23, 0, 0),
                            DayOfWeek = 2,
                            IsClosed = true,
                            OpenTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            OpeningHoursId = 4,
                            CloseTime = new TimeOnly(23, 0, 0),
                            DayOfWeek = 3,
                            IsClosed = false,
                            OpenTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            OpeningHoursId = 5,
                            CloseTime = new TimeOnly(23, 0, 0),
                            DayOfWeek = 4,
                            IsClosed = false,
                            OpenTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            OpeningHoursId = 6,
                            CloseTime = new TimeOnly(23, 0, 0),
                            DayOfWeek = 5,
                            IsClosed = false,
                            OpenTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            OpeningHoursId = 7,
                            CloseTime = new TimeOnly(23, 0, 0),
                            DayOfWeek = 6,
                            IsClosed = false,
                            OpenTime = new TimeOnly(10, 0, 0)
                        });
                });

            modelBuilder.Entity("Reliable_Reservations.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TimeSlotId")
                        .IsUnique();

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.SpecialOpeningHours", b =>
                {
                    b.Property<int>("SpecialOpeningHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialOpeningHoursId"));

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time(0)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("OpeningHoursId")
                        .HasColumnType("int");

                    b.HasKey("SpecialOpeningHoursId");

                    b.HasIndex("OpeningHoursId");

                    b.ToTable("SpecialOpeningHours");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.HasIndex("TableNumber")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Location = "Window",
                            SeatingCapacity = 4,
                            TableNumber = 1
                        },
                        new
                        {
                            TableId = 2,
                            Location = "Patio",
                            SeatingCapacity = 2,
                            TableNumber = 2
                        },
                        new
                        {
                            TableId = 3,
                            Location = "Corner",
                            SeatingCapacity = 6,
                            TableNumber = 3
                        },
                        new
                        {
                            TableId = 4,
                            Location = "Outside",
                            SeatingCapacity = 4,
                            TableNumber = 4
                        },
                        new
                        {
                            TableId = 5,
                            Location = "Outside",
                            SeatingCapacity = 4,
                            TableNumber = 5
                        });
                });

            modelBuilder.Entity("Reliable_Reservations.Models.TimeSlot", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeSlotId"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("OpeningHoursId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("TimeSlotId");

                    b.HasIndex("OpeningHoursId");

                    b.HasIndex("TableId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReservationTables", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId", "TableId");

                    b.HasIndex("TableId");

                    b.ToTable("ReservationTables");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.Reservation", b =>
                {
                    b.HasOne("Reliable_Reservations.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reliable_Reservations.Models.TimeSlot", "TimeSlot")
                        .WithOne("Reservation")
                        .HasForeignKey("Reliable_Reservations.Models.Reservation", "TimeSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.SpecialOpeningHours", b =>
                {
                    b.HasOne("Reliable_Reservations.Models.OpeningHours", "OpeningHours")
                        .WithMany("SpecialOpeningHours")
                        .HasForeignKey("OpeningHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.TimeSlot", b =>
                {
                    b.HasOne("Reliable_Reservations.Models.OpeningHours", "OpeningHours")
                        .WithMany("TimeSlots")
                        .HasForeignKey("OpeningHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reliable_Reservations.Models.Table", "Table")
                        .WithMany("TimeSlots")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpeningHours");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ReservationTables", b =>
                {
                    b.HasOne("Reliable_Reservations.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reliable_Reservations.Models.Table", null)
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reliable_Reservations.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.OpeningHours", b =>
                {
                    b.Navigation("SpecialOpeningHours");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.Table", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Reliable_Reservations.Models.TimeSlot", b =>
                {
                    b.Navigation("Reservation");
                });
#pragma warning restore 612, 618
        }
    }
}
